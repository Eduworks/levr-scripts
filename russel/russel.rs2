solr = {
    url="http%3A%2F%2Flocalhost%3A8080%2Fsolr%2F"
};

sessionDb=#object(
    indexDir="db",
    databaseName="dbSession",
    index="session"
);

groupDb={
	indexDir="db",
	databaseName="dbGroup",
	index="group"
};

permissionDb=#object(
	indexDir="db",
	databaseName="dbPermission",
	index="permission"
);

userDb=#object(
	indexDir="db",
	databaseName="dbUser",
	index="user"
);

fileDb=#object(
	indexDir="db",
	databaseName="dbFile",
	index="file"
);

fileMetadataDb=#object(
	indexDir="db",
	databaseName="dbFile",
	index="fileMetadata"
);

fileCommentDb=#object(
	indexDir="db",
	databaseName="dbFile",
	index="fileComment"
);

fileRatingDb=#object(
	indexDir="db",
	databaseName="dbFile",
	index="fileRating"
);

compact=#object(
	a=#idxCompact(
		indexDir="db",
		databaseName="dbFile",
		index="file"
	)
).displayJson();
/russel/compact=compact;

//***************************************************************************************************
//***************** RUSSEL-platform Global functions and definitions ********************************
//=================
sessionPostdata = #getMultipartPostData(field="session").toObject();
filePostMetadata = #getMultipartPostData(field="fileMetadata").toObject();
commentPostData = #getMultipartPostData(field="inCommnent").toObject();
ratingPostData = #getMultipartPostData(field="inRating").toObject();
flrPostdata = #getMultipartPostData(field="flrData").toObject();

permissionsKeyWord=#object(keyword="permissions").cget(keyword="");
subGroupsKeyWord=#object(keyword="subGroups").cget(keyword="");
parentGroupsKeyWord=#object(keyword="parentGroups").cget(keyword="");
groupsKeyWord=#object(keyword="groups").cget(keyword="");
usersKeyWord=#object(keyword="users").cget(keyword="");

permissionsField={field="permissions"};
subGroupsField={field="subGroups"};
parentGroupsField={field="parentGroups"};
groupsField={field="groups"};
usersField={field="users"};

subGroupLinkType={groupLinkType="subGroups"};
parentGroupLinkType={groupLinkType="parentGroups"};


//***************************************************************************************************
//***************** RUSSEL-platform User Management calls *******************************************

retrieveSessionMetadata = #sessionRead(sessionId=sessionPostdata.cget(sessionId="")).buildArguments(arguments=sessionDb).toObject();


//==============
//Returns the permission set as an array for the given user

userGroups=#userGet(userId=retrieveSessionMetadata.cget(username="")).buildArguments(arguments=userDb).getByParam(param=groupsKeyWord);
userPermissions=#userGet(userId=retrieveSessionMetadata.cget(username="")).buildArguments(arguments=userDb).getByParam(param=permissionsKeyWord);

//need the extra union(other=userPermissions) here in case the user has an empty groups assignments array or no groups assignments field
//There is probably a better way to do this...
 
aggUserPermissions=userGroups.cforEach(paramName="groupId",
                                       op=userPermissions.union(other=#groupAggregateMembersByRelatedGroup(groupId="@groupId", 
                                                                                                           permissionsField,
                                                                                                           parentGroupLinkType).buildArguments(arguments=groupDb)
                                                                )
                                       ).valueSet().union().union(other=userPermissions).removeDuplicates();
                                       
//if the user has no permissions, return an empty array
getAggUserPermissions=#if(operator=aggUserPermissions,
                          operand="",
                          eq=#listAdd(),
                          ne=aggUserPermissions
                          ); 

//==============
//Returns true if the user has the given permission, returns false otherwise.

userHasPermission=#if(operator=#userExists(userId=retrieveSessionMetadata.cget(username="")).buildArguments(arguments=userDb),
                      operand="true",
                      eq=#if(operator=retrieveSessionMetadata.cget(username=""),
                             operand="admin",
                             eq="true",
                             ne=#permissionIsValid(permissionSet=getAggUserPermissions,
                                                   permissionId="@permissionId")),
                      ne="false");
#userHasPermission=userHasPermission;

checkUserPermission=#object(a=validateSession,
							b=#userHasPermission(userId=sessionPostdata.cget(username=""),
                                                 permissionId=sessionPostdata.cget(permissionId="")
                                                 ).buildArguments(arguments=userDb),
                            ).cget(b="").displayJson();
/checkUserPermission=checkUserPermission;

//==============
//Check if an account has the admin permissions

isAdminAccount = #if(operator=#userHasPermission(permissionId="admin"),
                     operand="false",
                     eq=#error(code="403",
                               msg=#object(error="You don't have permission to perform that action.")
                               )
                     );
#isAdminAccount = isAdminAccount;


//=================
createUser = #object(a=validateSession,
                     b=isAdminAccount,
                     c=#userCreate(userId=sessionPostdata.cget(username=""),
                                   password=sessionPostdata.cget(password="")
                                   ).buildArguments(arguments=userDb)
                     ).cget(c="").displayJson();
/createUser = createUser; 

//=================
login = #if(operator=#userLogin(userId=sessionPostdata.cget(username=""), 
                                password=sessionPostdata.cget(password="")
                                ).buildArguments(arguments=userDb),
            operand="false",
            eq=#error(code="401",
                      msg=#object(error="Invalid username or password")
                      ),
            ne=#sessionCreate(username=sessionPostdata.cget(username="")
                              ).buildArguments(arguments=sessionDb)).displayJson();
/login = login;

//=================
logout = #object(a=validateSession,
                 b=#sessionDelete(sessionId=sessionPostdata.cget(sessionId="")
                 ).buildArguments(arguments=sessionDb)
         ).cget(b="").displayJson();
/logout = logout;

//=================
validateSession = #if(operator=#sessionValidate(sessionId=sessionPostdata.cget(sessionId="")
												).buildArguments(arguments=sessionDb),
                      operand="false",
                      eq=#error(code="401",
                                msg=#object(error="Token is no longer valid.")
                                ),
                      ne=#object(a="true").cget(a="")
                      ).displayJson();
/validateSession = validateSession;

getUserPermissions=#object(a=validateSession,
                           c=#if(operator=#userExists(userId=retrieveSessionMetadata.cget(username="")
                                                      ).buildArguments(arguments=userDb),
                                 operand="true",
                                 eq=getAggUserPermissions,
                                 ne="false")
                                 ).cget(c="").displayJson();
                                                                 
/getUserPermissions=getUserPermissions;


//=================
updateUser = #object(a=validateSession,
                     b=#userUpdateMetadata(userId=retrieveSessionMetadata.cget(username=""),
                                           field="userMetadata"
                                           ).buildArguments(arguments=userDb),
                     c="true"
                     ).cget(c="").displayJson();

/updateUser = updateUser;

//=================
updateUserAtCreate = #object(b=#userUpdateMetadata(userId=retrieveSessionMetadata.cget(username=""),
                                                   field="userMetadata"
                                                   ).buildArguments(arguments=userDb),
                             c="true"
                             ).cget(c="").displayJson();

/updateUserAtCreate = updateUserAtCreate;  

//==============
//Returns a user (minus the password) with the given username

userRec=#userGet(userId=sessionPostdata.cget(username="")
                 ).buildArguments(arguments=userDb);             
                
userGet=#object(a=validateSession,
                b=#if(operator=#userExists(userId=sessionPostdata.cget(username="")
                      					   ).buildArguments(arguments=userDb),
                      operand="true",
                      eq=userRec.removeFromObject(item=userRec.cget(password="")
                                                  ),
                      ne="false"
                      )
               ).cget(b="").displayJson();                
                    
/getUserByUsername=userGet;  

//==============
//Get the list of users that are currently in the system
userListing = #object(a=validateSession,
                      b=isAdminAccount,
                      c=#usersGet().buildArguments(arguments=userDb)
              ).cget(c="").displayJson();
/userListing = userListing;

//==============
//Reset the password of a given user
userPasswordReset = #object(a=validateSession,
                            b=isAdminAccount,
                            c=#userResetPassword(userId=sessionPostdata.cget(username=""),
                                                 password=sessionPostdata.cget(password="")
                                                 ).buildArguments(arguments=userDb)
                            ).cget(c="").displayJson();
/userPasswordReset=userPasswordReset;

//==============
//Mark user's EULA consent date
userEulaSet = #object(a=validateSession,
                      c=#setUserEula(userId=sessionPostdata.cget(username="")
                                    ).buildArguments(arguments=userDb)
                      ).cget(c="").displayJson();
/userEulaSet=userEulaSet;


//=================
deleteUser = #object(a=validateSession,
	b=isAdminAccount,
	c=#if(
		operator=sessionPostdata.cget(username=""),
		operand="admin",
		eq=#error(code="400",
			msg=#object(error="You cannot delete the admin account.")
		)
	),
	f=#userDelete(
		userId=sessionPostdata.cget(username=""),
		password=sessionPostdata.cget(password="")
	).buildArguments(arguments=userDb)
).cget(f="").displayJson();
/deleteUser = deleteUser;


//***************************************************************************************************
//****************** RUSSEL-platform Group Management calls *****************************************
//==============
//Create a group

rgroupCreate=#object(a=validateSession,
                    b=#groupCreate(groupId=sessionPostdata.cget(groupId="")
                                   ).buildArguments(arguments=groupDb)
                    ).cget(b="").displayJson();

///This createGroup is used by ucaster                    
/rcreateGroup=rgroupCreate;

//Create a new group in the system with user validation
createGroup = #object(a=validateSession,
                      b=isAdminAccount,
                      c=#groupCreate(groupDb,
                                     groupId=sessionPostdata.cget(groupId=""),
                                     name=sessionPostdata.cget(groupId=""),
                                     description=sessionPostdata.cget(description=""), 
                                     users=sessionPostdata.cget(users="")
                                     )
                      ).cget(c="").displayJson();
/createGroup = createGroup;
	
//==============
//Returns all groups

groupGetAll=#object(a=validateSession,
                    b=isAdminAccount,
                    c=#groupsGet(groupDb)
                    ).cget(c="").displayJson();
/getAllGroups=groupGetAll;

//==============
//Returns a group with the given groupId

groupGet=#object(a=validateSession,
                 b=#groupGet(groupDb,
                 			 groupId=sessionPostdata.cget(groupId="")
                 			 )
                 ).cget(b="").displayJson();        
/getGroupById=groupGet;     

//==============
//Updates a group with the given groupId with new name and description
updateGroup = #object(a=validateSession,
                      b=isAdminAccount,
                      c=#groupUpdate(groupDb,
                                     groupId=sessionPostdata.cget(groupId=""),
                                     name=sessionPostdata.cget(name=""),
                                     description=sessionPostdata.cget(description="")
                                     )
                      ).cget(c="").displayJson();
/updateGroup = updateGroup;

//==============
//Deletes a group with the given groupId
//todo Delete other group links

groupDelete=#object(a=validateSession,
					b=isAdminAccount,
					c=#if(operator=sessionPostdata.cget(groupId=""),
                          operand="admin",
                          eq=#error(code="400",
                                     msg=#object(error="You cannot delete the 'admin' group.")
                                     )
                          ),
                    d=#if(operator=sessionPostdata.cget(groupId=""),
                          operand="everyone",
                          eq=#error(code="400",
                                    msg=#object(error="You cannot delete the 'everyone' group.")
                                    )
                          ),
                    e=#groupDelete(groupDb,
                                   groupId=sessionPostdata.cget(groupId="")
                                   )
                    ).cget(e="").displayJson();
/deleteGroup=groupDelete;


//==============
//Add a user to a group

addUserToGroup=#object(a=validateSession,
                       d=#if(operator=#groupGet(groupDb,
                                                groupId=sessionPostdata.cget(groupId="")
                                                ),
                             operand="",
                             ne=#if(operator=#userExists(userId=sessionPostdata.cget(username="")).buildArguments(arguments=userDb),
                                    operand="true",
                                    eq=#groupUserAdd(groupDb,
                                                     groupId=sessionPostdata.cget(groupId=""),
				                    	             userId=sessionPostdata.cget(username="")
				                                     ),
                                    ne=#error(code="400",
											  msg=#object(error="User does not exist")
											  )
                                    ),
                             eq=#error(code="400",
									   msg=#object(error="Group does not exist")
									   )
                             )
                      ).cget(d="").displayJson();
/addUserToGroup=addUserToGroup;

//==============
//Remove a user from a group

removeUserFromGroup=#object(a=validateSession,
                            b=#if(operator=#groupGet(groupDb,
                                                     groupId=sessionPostdata.cget(groupId="")
                                                     ),
                                  operand="",
                                  ne=#if(operator=#userExists(userId=sessionPostdata.cget(username="")).buildArguments(arguments=userDb),
                                         operand="true",
                                         eq=#groupUserRemove(groupDb,
                                                             groupId=sessionPostdata.cget(groupId=""),
							                    	         userId=sessionPostdata.cget(username="")
							                                 ),
                                         ne=#error(code="400",
											       msg=#object(error="User does not exist")
											       )
										 ),
                                  eq=#error(code="400",
											msg=#object(error="Group does not exist")
											)
                                  )
                            ).cget(b="").displayJson();
/removeUserFromGroup=removeUserFromGroup;

//***************************************************************************************************
//***************** RUSSEL-platform Content (File) Management calls *********************************
//=================
fileUpload = #object(a=validateSession,
                     b=#fileCreateMetadata(username=retrieveSessionMetadata.cget(username=""),
                                           mime=sessionPostdata.cget(mime=""),
                                           id="@id").buildArguments(arguments=fileMetadataDb, key="fileIndex", value="0"),
                     c=#solrAddDocs(solr,
                                    documents=#fileGetMetadata(id="@id").buildArguments(arguments=fileMetadataDb).putInObject(dest="id",
                                                                                                                              item="@id")),
                     f=#if(operator=sessionPostdata.cget(legacy=""),
                           operand="",
                           eq=#displayJson(obj="@id"),
                           ne=#object(mimeType="text/html", 
                                      data=#object(obj="@id"), 
                                      filename="response").stringToFile())).ccall(id=#fileUpload().buildArguments(arguments=fileDb, 
                                                                                                                  key="fileIndex", 
                                                                                                                  value="0")).cget(f="");
/fileUpload = fileUpload;      

//=================
fileUpdate = #object(a=validateSession,
                     b=#fileCreateMetadata(username=retrieveSessionMetadata.cget(username=""),
                                           mime=sessionPostdata.cget(mime=""),
                                           id="@id").buildArguments(arguments=fileMetadataDb, 
                                                                    key="fileIndex", 
                                                                    value="0"),
                     c=#solrAddDocs(solr,
                                    documents=#fileGetMetadata(id="@id").buildArguments(arguments=fileMetadataDb).putInObject(dest="id",
                                                                                                                              item="@id")),
                     d="@id").ccall(id=#fileUpdate(id=sessionPostdata.cget(id="")).buildArguments(arguments=fileDb, 
                                                                                               key="fileIndex", 
                                                                                               value="0")).cget(d="").displayJson();
/fileUpdate = fileUpdate;      

//=================
fileGet = #object(a=#if(operator=#sessionValidate(sessionId="@sessionId").buildArguments(arguments=sessionDb),
                          operand="false",
                          eq=#error(code="401",
                                    msg=#object(error="Token is no longer valid.")),
                          ne=#object(a="true").cget(a="")),
                  c=#fileGet(id="@id").buildArguments(arguments=fileDb)).cget(c="");
/fileGet = fileGet;
    
//=================
fileDeleteFile = #object(a=validateSession,
                         b=#solrDeleteDocs(documents=sessionPostdata.cget(id=""),
                                           solr),
                         c=#fileDeleteRatingsByFile(fileGuid=sessionPostdata.cget(id="")).buildArguments(arguments=fileRatingDb),
                         d=#fileDeleteCommentsByFile(fileGuid=sessionPostdata.cget(id="")).buildArguments(arguments=fileCommentDb),
                         f=#fileDeleteMetadata(id=sessionPostdata.cget(id="")).buildArguments(arguments=fileMetadataDb),
                         z=#fileDeleteFile(id=sessionPostdata.cget(id="")).buildArguments(arguments=fileDb)).cget(z="").displayJson();
/fileDeleteFile = fileDeleteFile;

//=================
fileGetMetadata = #object(a=validateSession,
                          c=#fileGetMetadata(id=sessionPostdata.cget(id="")).buildArguments(arguments=fileMetadataDb)).cget(c="").toObject().displayJson();
/fileGetMetadata = fileGetMetadata;

//=================
fileUpdateMetadata = #object(a=validateSession,
                             b=#fileUpdateMetadata(field="fileMetadata").buildArguments(arguments=fileMetadataDb),
                             c=#solrAddDocs(solr,
                                            documents=#fileGetMetadata(id=filePostMetadata.cget(id="")).buildArguments(arguments=fileMetadataDb).putInObject(dest="id",
                                                                                                                                                             item=filePostMetadata.cget(id=""))),
                             f="true").cget(f="").displayJson();
/fileUpdateMetadata = fileUpdateMetadata;

//=================
fileAddComment = #object(a=validateSession,
                         b=#fileAddComment(field="inComment").buildArguments(arguments=fileCommentDb)).cget(b="").displayJson();
/fileAddComment = fileAddComment;

//=================
fileGetCommentsByFile = #object(a=validateSession,
                                b=#fileGetCommentsByFile(fileGuid=sessionPostdata.cget(id="")).buildArguments(arguments=fileCommentDb)).cget(b="").displayJson();
/fileGetCommentsByFile = fileGetCommentsByFile;

//=================
fileDeleteCommentByKey = #object(a=validateSession,
                                 b=#fileDeleteCommentByKey(id=sessionPostdata.cget(id="")).buildArguments(arguments=fileCommentDb)).cget(b="").displayJson();
/fileDeleteCommentByKey = fileDeleteCommentByKey;

//=================
fileDeleteCommentsByFile = #object(a=validateSession,
                                   b=#fileDeleteCommentsByFile(fileGuid=sessionPostdata.cget(id="")).buildArguments(arguments=fileCommentDb)).cget(b="").displayJson();
/fileDeleteCommentsByFile = fileDeleteCommentsByFile;

//=================
fileUpdateComment = #object(a=validateSession,
                            b=#fileUpdateComment(field="inComment").buildArguments(arguments=fileCommentDb)).cget(b="").displayJson();
/fileUpdateComment = fileUpdateComment;

//=================
fileAddRating = #object(a=validateSession,
                        b=#fileAddRating(field="inRating").buildArguments(arguments=fileRatingDb)).cget(b="").displayJson();
/fileAddRating = fileAddRating;

//================= 
fileGetRatingsByFile = #object(a=validateSession,
                               b=#fileGetRatingsByFile(fileGuid=sessionPostdata.cget(id="")).buildArguments(arguments=fileRatingDb)).cget(b="").displayJson();
/fileGetRatingsByFile = fileGetRatingsByFile;

//=================
fileDeleteRatingByKey = #object(a=validateSession,
                                b=#fileDeleteRatingByKey(id=sessionPostdata.cget(id="")).buildArguments(arguments=fileRatingDb)).cget(b="").displayJson();
/fileDeleteRatingByKey = fileDeleteRatingByKey;

//=================
fileDeleteRatingsByFile = #object(a=validateSession,
                                  b=#fileDeleteRatingsByFile(fileGuid=sessionPostdata.cget(id="")).buildArguments(arguments=fileRatingDb)).cget(b="").displayJson();
/fileDeleteRatingsByFile = fileDeleteRatingsByFile;

//=================
fileUpdateRating = #object(a=validateSession,
                           b=#fileUpdateRating(field="inRating",
                                               username=retrieveSessionMetadata.cget(username="")).buildArguments(arguments=fileRatingDb)).cget(b="").displayJson();
/fileUpdateRating = fileUpdateRating;

//=================
fileGetAverageRatingForFile = #object(a=validateSession,
                                      b=#fileGetAverageRatingForFile(fileGuid=sessionPostdata.cget(id="")).buildArguments(arguments=fileRatingDb)).cget(b="").displayJson();
/fileGetAverageRatingForFile = fileGetAverageRatingForFile;

//===================
solrQuery = #object(a=validateSession,
                    b=#solrQuery(
                    	sq=sessionPostdata.cget(sq=""),
						rows=sessionPostdata.cget(rows=""),
						cursor=sessionPostdata.cget(cursor=""),
						useCursor=sessionPostdata.cget(useCursor=""),
						start=sessionPostdata.cget(start=""),
						idSort=sessionPostdata.cget(idSort=""),
						useMustMatchAll=sessionPostdata.cget(useMustMatchAll=""),
                        solr
                    )).cget(b="").displayJson();
/solrQuery = solrQuery;


solrClear = #object(a=validateSession,
                    b=isAdminAccount,
                    c=#solrClear(solr)).displayJson();
/solrClear = solrClear;


//===================

exportToZip = #object(a=validateSession,
                      b=#listAdd(array=#listAdd(item=#fileGet(id=sessionPostdata.cget(projectToZip="").cget(projectNodeId="")).buildArguments(arguments=fileDb)),
                                 item=sessionPostdata.cget(mediaToZip="").cforEach(paramName="fileObject",
                                                                                 op=#if(operator=#toObject(obj="@fileObject").cget(id=""),
                                                                                        operand="",
                                                                                        eq=#toObject(obj="@fileObject").stringToFile(),
                                                                                        ne=#stringToFile(obj=#object(data=#fileGet(id=#toObject(obj="@fileObject").cget(id="")).buildArguments(arguments=fileDb),
                                                                                                                     filename=#add(a=#toObject(obj="@fileObject").cget(location=""),
                                                                                                                                   b=#fileGetMetadata(id=#toObject(obj="@fileObject").cget(id="")).buildArguments(arguments=fileMetadataDb).toObject().cget(fileName_t="")))))).valueSet().filesToZip(name=sessionPostdata.cget(projectToZip="").cget(projectZipName=""))).filesToZip(name=sessionPostdata.cget(projectToZip="").cget(projectName=""))).cget(b="");
/exportToZip = exportToZip;
 
//===================

importFromZip = #object(a=validateSession,
                        b="");
/importFromZip = importFromZip; 

//===================

publishToFlr=#object(a=validateSession,
                     b=#flrPublish(flrData=flrPostdata)).cget(b="").displayJson();   
/publishToFlr=publishToFlr;


//***************************************************************************************************
//****************** RUSSEL-platform Permission Management calls ************************************
//==============
//Create a permission

permissionCreate=#object(a=validateSession,
                         b=isAdminAccount,
                         c=#permissionCreate(permissionId=sessionPostdata.cget(permissionId="")).buildArguments(arguments=permissionDb)).cget(c="").displayJson();

/createPermission=permissionCreate;

//==============
//Returns all permissions

permissionGetAll=#object(a=validateSession,
                         b=isAdminAccount,
                         c=#permissionsGet().buildArguments(arguments=permissionDb)).cget(c="").displayJson();
                    
/getAllPermissions=permissionGetAll;

//==============
//Returns a permission definition with the given permissionId

permissionGet=#object(a=validateSession,
                      b=isAdminAccount,
                      c=#permissionGet(permissionId=sessionPostdata.cget(permissionId="")).buildArguments(arguments=permissionDb)).cget(c="").displayJson();
                    
/getPermissionById=permissionGet;           

//==============
//Deletes a permission definition with the given permissionId
//todo Delete permission assignments

permissionDelete=#object(a=validateSession,
                         b=isAdminAccount,
                         c=#permissionDelete(permissionId=sessionPostdata.cget(permissionId="")).buildArguments(arguments=permissionDb)).cget(c="").displayJson();
                    
/deletePermission=permissionDelete;


//==============
//Add a permission to a user

auserPermissions=#listAdd(array=#userGet(userId=sessionPostdata.cget(username="")).buildArguments(arguments=userDb).getByParam(param=permissionsKeyWord),
                          item=sessionPostdata.cget(permissionId="")).removeDuplicates();

addUserPermission=#object(a=validateSession,
                          b=isAdminAccount,
                          c=#if(operator=#userExists(userId=sessionPostdata.cget(username="")).buildArguments(arguments=userDb),
                                operand="true",
                                eq=#if(operator=#permissionExists(permissionId=sessionPostdata.cget(permissionId="")).buildArguments(arguments=permissionDb),
                                       operand="true",
                                       eq=#userUpdateField(userId=sessionPostdata.cget(username=""),
                                                           permissionsField,
                                                           value=auserPermissions,
                                                           isArray="true").buildArguments(arguments=userDb),
                                       ne="false"),
                                 ne="false")
                          ).cget(c="").displayJson();

/addUserPermission=addUserPermission;

//==============
//Remove a permission from a user

ruserPermissions=#userGet(userId=sessionPostdata.cget(username="")).buildArguments(arguments=userDb).getByParam(param=permissionsKeyWord).removeFromArray(item=sessionPostdata.cget(permissionId=""));

removeUserPermission=#object(a=validateSession,
                             b=isAdminAccount,
                             c=#if(operator=#userExists(userId=sessionPostdata.cget(username="")).buildArguments(arguments=userDb),
                                   operand="true",
                                   eq=#userUpdateField(userId=sessionPostdata.cget(username=""),
                                                       permissionsField,
                                                       value=ruserPermissions,
                                                       isArray="true").buildArguments(arguments=userDb),
                                   ne="false")
                            ).cget(c="").displayJson();

/removeUserPermission=removeUserPermission;


//***************************************************************************************************
//***************** RUSSEL-platform Initialization calls ********************************************

initializeRussel = #object(a=#permissionCreate(permissionId="admin").buildArguments(arguments=permissionDb),
                           b=#permissionCreate(permissionId="curate").buildArguments(arguments=permissionDb),
                           c=#userCreate(userId="admin",
                                         password="admin"
                                         ).buildArguments(arguments=userDb),
                           d=#groupCreate(groupDb,
                                          groupId="allAdmins",
                                          name="allAdmins",
                                          description="All system administrators"
                                          ),
                           e=#groupCreate(groupDb,
                                          groupId="allCurators",
                                          name="allCurators",
                                          description="All system curators"
                                          ),     
                           f=#groupCreate(groupDb,
                                          groupId="allUsers",
                                          name="allUsers",
                                          description="All system users"
                                          )   
                           );
#setupRusselAutoExecute=initializeRussel;