//---------------------------------------//---------------------------------------
//---------------Helpers
//==============

agentDB = {
	indexDir = #competencyAgentDirectory(),
	databaseName = #competencyAgentDBName(),
	index = "0"
};

evidenceDB = {
	indexDir = #competencyEvidenceDirectory(),
	databaseName = #competencyEvidenceDBName(),
	index = "0"
};

evidenceFileDB = {
	indexDir = #competencyUserEvidenceDirectory(),
	databaseName = #competencyEvidenceFileDBName(),
	index = "0"
};  

userDB = {
	indexDir = #competencyUserDirectory(),
	databaseName = #competencyUserDBName(),
	index = "0"
};

recordDB = {
	indexDir = #competencyUserDirectory(),
	databaseName = "records",
	index="@userId"
};

getAgentInfo = #idxGet(agentDB, key="@agentId").toObject();

firstChar = #string(str="@str", op="substr", begin="0", end="1");

removedFirst = #string(str="@str", op="substr", begin="1");
simpleId = #if(operator=firstChar, operand=":", eq=removedFirst, ne="@str");


//---------------------------------------//---------------------------------------
//---------------Service Functions
//==============
//==============
// CREATE Competency Record Validation
//--------------
// #competencyCreateRecordValidation
//--------------
// userId:
// recordId:
// agentId:
// confidence:
// evidenceType:
// evidenceDescription:
// evidenceDate:
// evidenceResult:
// evidenceURI: [One of]
// evidenceString: [One of]
// evidenceFileName:  [One of]
//==============

// TODO: May want to create specific evidence File DBs for each user

getEvidenceWithId = #count(obj=#idxGet(evidenceDB, key="@evidenceId"));
checkExists = #if(
	operator=getEvidenceWithId, 
	operand="0", 
	eq="false", 
	ne="true"
);

// 	1) Generate Unique UUID for Evidence ID
generateUnique = #generateUUID();
generateEvidenceId = #add(a="evidence-", b=generateUnique);
recurseCheck = #execute(service="recurse", evidenceId=generateEvidenceId);
 
checkAndRegen = #if(
	operator=checkExists, 
	operand="true", 
	eq=recurseCheck, 
	ne="@evidenceId"
);
#recurse = checkAndRegen; 
generateAndCheckUUID = generateEvidenceId.toParameter(op=checkAndRegen, paramName="evidenceId");


//	3) Add remaining fields to evidence object and add to Evidence DB (key:evidenceId , obj: {type, date, result, description (optional), one of: [uri, string, file] })
createEvidenceInDB = #idxSet(evidenceDB, key=#get(obj="@evidenceInfo", evidenceId=""), obj="@evidenceInfo");
addToDB = #decode(obj="@evidence").putInObject(
	dest="evidenceId", 
	item=generateAndCheckUUID
).putInObject(
	dest="type", 
	item="@evidenceType"
).putInObject(
	dest="description", 
	item="@evidenceDescription"
).putInObject(
	dest="date",
	item=#date(input="@evidenceDate", dateFormat="yyyy-MM-dd"),
).putInObject(
	dest="result",
	item="@evidenceResult",
).toParameter(op=createEvidenceInDB, paramName="evidenceInfo");

//	2) Decide Which Evidence Type this is (URI, String or File) and create evidence object to be stored in DB
uploadFile = #fileUpload(evidenceFileDB, fileIndex="0");

createStringEvidence = #object(string="@evidenceString").toParameter(op=addToDB, paramName="evidence");
createURIEvidence = #object(uri="@evidenceURI").toParameter(op=addToDB, paramName="evidence");

createFileEvidence = #object(fileId=uploadFile).toParameter(op=addToDB, paramName="evidence");

tryCreateFileEvidence = #if(
	operator="@evidenceFileName", 
	operand="",
	eq=#error(msg="Couldnt Find Evidence URI, String or File"),
	ne=createFileEvidence
);

tryCreateURIEvidence = #if(
	operator="@evidenceURI", 
	operand="",
	eq=tryCreateFileEvidence,
	ne=createURIEvidence,
);

createEvidence = #if(
	operator="@evidenceString", 
	operand="",
	eq=tryCreateURIEvidence, 
	ne=createStringEvidence
);
											

checkCreateEvidence = #object(
	a=#competencyErrorEvidenceTypeSet(), 
	b=#competencyErrorEvidenceResultSet(),
	c=#competencyErrorEvidenceDateSet(),
	d=createEvidence
).get(d="").get(evidenceId="");


// TODO: Change Validation_Date to Validation_Updated
// 	4) Create or Find Matching recordValidation in User Competency Profile and Add the new Evidence to it
validationValues = #add(
	a="{",
	b=#if(operator="@evidenceId", operand="", 
				eq="", 
				ne=#add(a="':validationEvidence': ['",
						b="@evidenceId", c="'],")
		),
	c="':validationConfidence':[",
	d="@confidence",
	e="], ':validationDate': ['", 
	f=#if(operator="@validationDate", operand="",
			eq=#competencyNow(),
			ne=#add(
					a=#date(dateFormat="yyyy-MM-dd", input="@validationDate"),
					b="T",
					c=#date(dateFormat="HH:mm:ss"),
					_string="true"
				)
		),
	g="'], ':validationAgent':[",
	h="@agentId",
	i="]}"
);

updateValidationDb = #object().putInObject(
									dest="@validationId",
									item=#decode(obj="@record").putInObject(
												dest="validations",
												item=#decode(obj="@record").cget(validations="").putInObject(
																									dest="@validationId",
																									item=validationValues.decode()
																								)
											).putInObject(
												dest=":recordValidation",
												item=#if(operator="@recordValidationArray", operand="",
															ne=#toArray(obj="@recordValidationArray").append(a="@validationId"),
															eq=#toArray(obj=#add(a="[",b="]")).append(a="@validationId")
														)
											).idxSet(recordDB, key="@recordId").cget(validations="").getByParam(param="@validationId")
								);

createValidation = updateValidationDb.ccall(
										record=#idxGet(recordDB, key="@recordId"),
										recordValidationArray=#idxGet(recordDB, key="@recordId").decode().getByParam(param=":recordValidation"),
										validationId=#add(a=":", b=#generateUUID())
									);
									
checkValues = #if(operator=#decode(obj="@validationObj").getByParam(param=":validationAgent").getIndex(index="0"), operand="@agentId",
					eq=#if(operator=#date(input=#decode(obj="@validationObj").getByParam(param=":validationDate").getIndex(index="0"), dateFormat="yyyy-MM-dd'T'hh:mm:ss", _raw="true"),
							operand=#date(input=#add(a=#date(input=#competencyNow(), dateFormat="yyyy-MM-dd"), b="T00:00:00"), dateFormat="yyyy-MM-dd'T'hh:mm:ss", _raw="true"),
							ge=#if(operator=#date(input=#decode(obj="@validationObj").getByParam(param=":validationDate").getIndex(index="0"), dateFormat="yyyy-MM-dd'T'hh:mm:ss", _raw="true"),
									operand=#date(input=#add(a=#date(input=#competencyNow(), dateFormat="yyyy-MM-dd"), b="T23:59:59"), dateFormat="yyyy-MM-dd'T'hh:mm:ss", _raw="true"),
									le="@validationId",
									gt="false"
								),
							lt="false"
						),
					ne="false"
				);

findValidation = #if(operator="@validations", operand="",
						ne=#if(operator=#toObject(obj="@validations").count(), operand="0",
								ne=#decode(obj="@validations").cforEach(op=checkValues, paramName="validationId", valueName="validationObj", array="true").removeFromArray(item="false"),
								eq=#toArray(obj=#add(a="[",b="]"))
							),
						eq=#toArray(obj=#add(a="[",b="]"))
					).ccall(
						validations=#idxGet(recordDB, key="@recordId").decode().cget(validations="")
					);

createObject = #object(count=#toArray(obj="@result").count(), result=#decode(obj="@result")); 
validationCountObject = findValidation.toParameter(op=createObject, paramName="result");

validationEvidences = #decode(obj="@validation").getByParam(param=":validationEvidence");

updateDb = #decode(obj="@recordObj").putInObject(
										dest="validations",
										item=#decode(obj="@validations").putInObject(
																			dest="@validationId",
																			item=#decode(obj="@validation").putInObject(
																												dest=":validationEvidence",
																												item=validationEvidences.append(a="@evidenceId").removeDuplicates()
																											)
																		)
									).idxSet(recordDB, key="@recordId");

getValuesAndUpdateDb = updateDb.ccall(
									validations=#decode(obj="@recordObj").cget(validations=""),
									validation=#decode(obj="@recordObj").cget(validations="").getByParam(param="@validationId"),
									recordValidationArray=#decode(obj="@recordObj").getByParam(param=":recordValidation")
								);

addEvidenceToValidation = getValuesAndUpdateDb.ccall(
										recordObj=#idxGet(recordDB, key="@recordId"),
									).execute(
										service="competencyUpdateRecordValidationConfidence", 
										userId="@userId",
										validationId="@validationId", 
										confidence="@confidence"
									);

getValidationId = #decode(obj="@countObj").get(result="").toArray().getIndex(index="0").get(id="");
addEvidence = getValidationId.toParameter(
	op=addEvidenceToValidation, 
	paramName="validationId"
);

createOrAdd = #if(operator=#get(obj=#decode(obj="@countObj"), count=""), operand="1", ge=addEvidence, lt=createValidation);

createOrAddToValidation = createOrAdd.ccall(countObj=validationCountObject);
createEvidenceThenValidation = createOrAddToValidation.ccall(evidenceId=checkCreateEvidence);

checkCreateValidation = #object(
	a=#competencyErrorUserIdSet(),
	b=#competencyErrorUserExists(),
	c=#competencyErrorAgentIdSet(),
	d=#competencyErrorAgentExists(),
	e=#competencyErrorRecordExists(),
	f=#competencyReadRecord(),
	g=#competencyErrorConfidenceSet(),
	h=#competencyErrorConfidenceValue(),
	i=createEvidenceThenValidation
).get(i="");

// TODO: After Adding Evidence and Validation, need to update record confidence using #competencyDetermineRecordConfidence 
// THIS SHOULD BE HAPPENING NOW, NEED TO DOUBLE CHECK THAT IT WORKS THOUGH

#competencyCreateRecordValidation = checkCreateValidation;


//==============
// CREATE Competency Record Validation No Evidence
//--------------
// #competencyCreateRecordValidationNoEvidence
//--------------
// userId:
// recordId:
// agentId:
// confidence:
//==============  

returnValidation = #competencyReadRecordValidation(userId="@userId", validationId=#get(obj=#decode(obj="@countObj"), result="").getIndex(index="0"));

createIfNotExists = #if(operator=#get(obj=#decode(obj="@countObj"), count=""), operand="1", 
	lt=createValidation, 
	ge=returnValidation
);

checkExistsCreateValidation = #call(obj=createIfNotExists, countObj=validationCountObject);

checkCreateValidationNoEvidence = #object(
	a=#competencyErrorUserIdSet(),
	b=#competencyErrorUserExists(),
	c=#competencyErrorAgentIdSet(),
	d=#competencyErrorAgentExists(),
	e=#competencyErrorRecordExists(),
	f=#competencyReadRecord(),
	g=#competencyErrorConfidenceSet(),
	h=#competencyErrorConfidenceValue(),
	i=checkExistsCreateValidation,
	j=#competencyUpdateRecordConfidence(),
).get(i="");
									
#competencyCreateRecordValidationNoEvidence = checkCreateValidationNoEvidence;

//==============
// CREATE Competency Record Validation With Evidence Ids
//--------------
// #competencyCreateRecordValidationWithEvidenceIds
//--------------
// userId:
// recordId:
// agentId:
// confidence:
// evidenceIds:
//==============

checkEvidenceExistsThenAdd = #if(operator=#competencyCheckEvidenceExists(), operand="true", eq=#call(op=addEvidenceToValidation));

addEvidencesToValidation = #toArray(obj="@evidenceIds").cforEach(op=checkEvidenceExistsThenAdd, paramName="evidenceId", threaded="false");

addEvidencesAndGetValidation = #object(
	a=addEvidencesToValidation,
	b=#competencyReadRecordValidation()
).get(b="");

checkExistsCreateValidationAndAddEvidences = #call(
	obj=createIfNotExists, 
	countObj=validationCountObject
).keySet().getIndex(
	index="0"
).toParameter(
	op=addEvidencesAndGetValidation, 
	paramName="validationId"
);
    
checkCreateValidationWithIds = #object(
	a=#competencyErrorUserIdSet(),
	b=#competencyErrorUserExists(),
	c=#competencyErrorAgentIdSet(),
	d=#competencyErrorAgentExists(),
	e=#competencyErrorRecordExists(),
	f=#competencyReadRecord(),
	g=#competencyErrorConfidenceSet(),
	h=#competencyErrorConfidenceValue(),		
	i=#toArray(obj="@evidenceIds").cforEach(op=#competencyErrorEvidenceExists(), paramName="evidenceId", rethrow="true", threaded="false"),	
	j=checkExistsCreateValidationAndAddEvidences,
	k=#competencyUpdateRecordConfidence(),
).get(j="");

#competencyCreateRecordValidationWithEvidenceIds = checkCreateValidationWithIds;

//==============
// CREATE Unattached Competency Evidence
//--------------
// #competencyCreateUnattachedEvidence
//--------------
// userId:
// evidenceType:
// evidenceDescription:
// evidenceDate:
// evidenceResult:
// evidenceURI: [One of]
// evidenceString: [One of]
// evidenceFileName:  [One of]
//==============

createUnattached = #object(
	a=#competencyErrorUserIdSet(),
	b=#competencyErrorUserExists(),
	c=checkCreateEvidence
).get(c="").toParameter(
	op=#competencyReadEvidence(),
	paramName="evidenceId"
);

#competencyCreateUnattachedEvidence = createUnattached;

//==============
// READ Competency Record Validation
//--------------
// #competencyReadRecordValidation
//--------------
// userId:
// validationId:
//==============

checkValidations = #if(operator=#decode(obj="@recordObj").getByParam(param="validations").keySet().has(has="@validationId"), operand="true",
						eq=#decode(obj="@recordObj").cget(validations="").getByParam(param="@validationId"),
						ne="false"
					).ccall(
						recordObj=#idxGet(recordDB, key="@recordId")
					);

getValidation = #idxKeys(recordDB).cforEach(op=checkValidations, paramName="recordId", array="true").removeFromArray(item="false").getIndex(index="0");

checkGetValidation = #object(
	a=#competencyErrorUserIdSet(),
	b=#competencyErrorUserExists(),
	c=#competencyErrorValidationIdSet(),
	d=#competencyErrorValidationExists(),
	e=#object().putInObject(
					dest="@validationId",
					item=getValidation
				)
).get(e="");
						
#competencyReadRecordValidation = checkGetValidation;

//==============
// READ ALL Competency Record Validations
//--------------
// #competencyReadAllRecordValidations
//--------------
// userId:
//==============

readAllValidations = #object(
						a=#competencyErrorUserIdSet(),
						b=#competencyErrorUserExists(),
						c=getValidations
					).cget(c="");
#competencyReadAllRecordValidations = readAllValidations;

//==============
// UPDATE Record Validation Confidence
//--------------
// #competencyUpdateRecordValidationConfidence
//--------------
// userId:
// validationId:
// confidence:
//==============

determineUpdatedConfidence = #string(str="0");

determineWithNewConfidence = #competencyErrorConfidenceValue();

newConfidence = #paramExists(paramName="confidence", true="@confidence", false=determineUpdatedConfidence); 

updateConfidenceValues = #competencyReadRecordValidation().getByParam(param="@validationId").putInObject(dest=":validationConfidence", item=#toArray(obj=newConfidence)).displayJson(_collapse="true");

updateValidationValues = #decode(obj="@recordObj").putInObject(
														dest="validations",
														item=#decode(obj="@validations").putInObject(
																							dest="@validationId",
																							item=#decode(obj="@validation").putInObject(
																																dest=":validationConfidence",
																																item=#toArray(obj=#add(a="[",b="]")).append(a=#toDouble(obj="@confidence"))
																															)
																						)
													).idxSet(recordDB, key="@recordId");

updateValidationConfidenceDb = updateValidationValues.ccall(
														validations=#decode(obj="@recordObj").cget(validations=""),
														validation=#decode(obj="@recordObj").cget(validations="").getByParam(param="@validationId")
													);

updateValidationConfidence = updateValidationConfidenceDb.ccall(
															recordObj=#idxGet(recordDB, key="@recordId")
														);

getRecordId = #if(operator=#idxGet(recordDB, key="@recordId").decode().getByParam(param=":recordValidation").toArray().has(has="@validationId"), operand="true",
					eq="@recordId",
					ne="false"
				);

checkUpdateValidationConfidence = #object(
										a=#competencyErrorUserOrAgentExists(),
										b=#competencyErrorUserIdSet(),
										c=#competencyErrorUserExists(),
										d=#competencyErrorValidationIdSet(),
										e=#competencyErrorValidationExists(),
										f=updateValidationConfidence.ccall(
																		recordId=#if(operator="@recordId", operand="",
																						ne="@recordId",
																						eq=#idxKeys(recordDB).cforEach(op=getRecordId, paramName="recordId", array="true").removeFromArray(item="false").getIndex(index="0")
																					)
																	),
										g=getValidation,
									).cget(g="");

#competencyUpdateRecordValidationConfidence = checkUpdateValidationConfidence;

//==============
// DELETE Record Validation and Evidence
//--------------
// #competencyDeleteRecordValidation
//--------------
// userId:
// validationId:
//==============

callDeleteEvidence = #execute(service="competencyDeleteEvidence", userId="@userId", evidenceId=#debug(obj="@evidenceId"), leaveReferences="true");

deleteEvidencesIfExist = #if(
	operator=#decode(obj="@validation").has(has=":validationEvidence"), 
	operand=#true(), 
	eq=#decode(obj="@validation").getByParam(param=":validationEvidence").forEach(op=callDeleteEvidence, paramName="evidenceId"),
	ne=""
);

deleteEvidences = getValidation.toParameter(op=deleteEvidencesIfExist, paramName="validation"); 


deleteValidationFromDb = #decode(obj="@record").putInObject(
	dest="validations",
	item=#decode(obj="@record").cget(validations="").removeByParam(
														param="@validationId"
													)
).putInObject(
	dest=":recordValidation",
	item=#decode(obj="@record").getByParam(param=":recordValidation").toArray().removeFromArray(item="@validationId")
).idxSet(recordDB, key="@recordId");

removeValidation = deleteValidationFromDb.ccall(
										record=#idxGet(recordDB, key="@recordId"),
									);

checkValidations = #if(operator=#decode(obj="@recordObj").getByParam(param="validations").keySet().has(has="@validationId"), operand="true",
						eq="@recordId",
						ne="false"
					).ccall(
						recordObj=#idxGet(recordDB, key="@recordId")
					);

getValidationRecordId = #idxKeys(recordDB).cforEach(op=checkValidations, paramName="recordId", array="true").removeFromArray(item="false").getIndex(index="0");

deleteValidation = #object(
	a=#competencyErrorUserIdSet(),
	b=#competencyErrorUserExists(),
	c=#competencyErrorValidationIdSet(),
	d=#competencyErrorValidationExists(),
	e=deleteEvidences,
	f=removeValidation.ccall(
			recordId=getValidationRecordId
		)
).get(f="");
							
#competencyDeleteRecordValidation = deleteValidation; 

// TODO: Delete Record Validation and evidence corresponding to it

//==============
// CREATE Competency Validation Agent
//--------------
// #competencyCreateValidationAgent
//--------------
// agentType:  
// agentName:
// agentDescription:
// agentId: [Optional]
//==============
findAgentCount = #count(obj=#idxGet(indexDir = #competencyAgentDirectory(), databaseName = #competencyAgentDBName(), index = "0", key="@agentId"));

checkIdExistsError = #if(
	operator=findAgentCount, 
	operand="0",
	eq="@agentId",
	ne=#error(msg="Agent Already Exists with the Id Desired")
); 


checkIdExists = #if(
	operator=findAgentCount, 
	operand="0",
	eq="@agentId",
	ne=#execute(service="recurseAgentId")
); 

generateName = #add(a="agent-", b=#generateUUID());
createNewId = generateName.toParameter(op=checkIdExists, paramName="agentId");
#recurseAgentId = createNewId;

getAgentId = #if(
	operator="@agentId", 
	operand="",
	eq=createNewId,
	ne=checkIdExistsError.call(agentId="@agentId")
);

addAgentToDB = #object(
	a=#idxSet(agentDB, key="@id", obj="@agentInfo"),
	b="@id",
).call(id=getAgentId).get(b="");
					
createAgent = #object().putInObject(
	dest="name", 
	item="@agentName"
).putInObject(
	dest="description", 
	item="@agentDescription"
).putInObject(
	dest="type",
	item="@agentType",
).toParameter(op=addAgentToDB, paramName="agentInfo");

checkCreateAgent = #object(
	a=#competencyErrorAgentTypeSet(),
	b=#competencyErrorAgentNameSet(),
	c=createAgent
).cget(c="");

#competencyCreateValidationAgent = checkCreateAgent;


//==============
// Read Competency Validation Agent
//--------------
// #competencyValidationAgentIds
//==============

agentKeys = #idxKeys(agentDB).toArray();

#competencyValidationAgentIds = agentKeys;

//==============
// Read Competency Validation Agent
//--------------
// #competencyReadValidationAgent
//--------------
// agentId:
//==============

readAgentDB = #idxGet(agentDB, key="@agentId");

readAgent = #object(
	a = #competencyErrorAgentIdSet(),
	b = #competencyErrorAgentExists(),
	c = readAgentDB
).get(c="");
				
#competencyReadValidationAgent = readAgent;

//==============
// READ ALL Competency Validation Agents
//--------------
// #competencyReadAllValidationAgents
//--------------
//==============

getAllAgents = #idxKeys(agentDB).forEach(op=getAgentInfo, paramName="agentId");
#competencyReadAllValidationAgents = getAllAgents;

//==============
// READ ALL Competency Validation Agent Types
//--------------
// #competencyReadValidationAgentTypes
//--------------
//==============

getAgentType = #competencyReadValidationAgent(agentId="@agentId").get(type="");

agentKeys = #idxKeys(agentDB);
getAgentTypes = agentKeys.forEach(paramName="agentId", op=getAgentType, aggregation="appendArray").removeDuplicates();

#competencyAgentTypes = getAgentTypes;

//==============
// DELETE Competency Validation Agent
//--------------
// #competencyDeleteValidationAgent
//--------------
//==============

// TODO: Maybe delete all of the different evidences that use this agent (Dangerous)

deleteAgent = #idxDelete(agentDB, key="@agentId");

checkDeleteAgent = #object(
	a=#competencyErrorAgentIdSet(),
	b=#competencyErrorAgentExists(),
	c=deleteAgent
).get(c="");
						
#competencyDeleteValidationAgent = checkDeleteAgent;

//==============
// Add Evidence
//--------------
// #competencyAddEvidence
//--------------
// userId
// validationId:
// evidenceType:
// evidenceDescription:
// evidenceDate:
// evidenceResult:
// evidenceURI: [One of]
// evidenceString: [One of]
// evidenceFileName:  [One of]
//==============

getRecordId = #if(operator=#idxGet(recordDB, key="@recordId").decode().getByParam(param=":recordValidation").toArray().has(has="@validationId"), operand="true",
					eq="@recordId",
					ne="false"
				);

addNewEvidence = #object(
	a="@evidenceId",
	b=addEvidenceToValidation.ccall(
								recordId=#idxKeys(recordDB).cforEach(op=getRecordId, paramName="recordId", array="true").removeFromArray(item="false").getIndex(index="0")
							)
).get(a="");

getEvidence = #idxGet(evidenceDB,key="@evidenceId").toObject();

checkAddEvidence = #object(
	a=#competencyErrorUserIdSet(),
	b=#competencyErrorUserExists(),
	c=#competencyErrorValidationIdSet(),
	d=#competencyErrorValidationExists()
).get(c="").toParameter(
	op=checkCreateEvidence,
	paramName="validationId"
).toParameter(
	op=addNewEvidence, 
	paramName="evidenceId"
).debug().toParameter(
	op=getEvidence,
	paramName="evidenceId"
);

#competencyAddEvidence = checkAddEvidence;


//==============
// READ Evidence
//--------------
// #competencyReadEvidence
//--------------
// evidenceId:
//==============

getEvidence = #idxGet(evidenceDB,key="@evidenceId");

checkGetEvidence = #object(
	a=#competencyErrorEvidenceIdSet(),
	b=getEvidence
).get(b="").toObject();

#competencyReadEvidence = checkGetEvidence;


//==============
// READ Evidence File
//--------------
// #competencyReadEvidenceFile
//--------------
// evidenceId:
//==============

checkGetEvidenceFile = #if(operator="@fileId", operand="",
							ne=#fileGet(evidenceFileDB, id="@fileId"),
							eq=#error(msg="")
						).ccall(fileId=getEvidence.ccall(evidenceId="@evidenceId").toObject().cget(fileId=""));

#competencyReadEvidenceFile = checkGetEvidenceFile;

//==============
// READ ALL Evidence Types
//--------------
// #competencyReadEvidenceTypes
//--------------
//==============

getEvidenceType = #competencyReadEvidence(evidenceId="@evidenceId").get(type="");

evidenceKeys = #idxKeys(evidenceDB);
getTypes = evidenceKeys.forEach(paramName="evidenceId", op=getEvidenceType, aggregation="appendArray").removeDuplicates();

#competencyEvidenceTypes = getTypes;

//==============
// Update Evidence
//--------------
// #competencyDeleteEvidence
//--------------
// evidenceId:
// evidenceDescription:
// evidenceType:
//==============

evidenceDescription = #if(operator="@evidenceDescription", operand="", eq=#get(obj="@obj", description=""), ne="@evidenceDescription");
evidenceType = #if(operator="@evidenceType", operand="", eq=#get(obj="@obj", type=""), ne="@evidenceType");

evidenceUpdates = #idxGet(
	evidenceDB, 
	key="@evidenceId"
).putInObject(
	dest="description", 
	item=evidenceDescription,
).putInObject(
	dest="type", 
	item=evidenceType,
);

updateEvidence = #idxSet(evidenceDB, key="@evidenceId", obj=evidenceUpdates);

checkUpdateEvidence = #object(
	a=#competencyErrorEvidenceIdSet(),
	b=#competencyErrorEvidenceExists(),
	c=updateEvidence
).get(c="").displayJson(_collapse="true");

#competencyUpdateEvidence = checkUpdateEvidence;

//==============
// DELETE Evidence
//--------------
// #competencyDeleteEvidence
//--------------
// evidenceId:
// leaveReferences:
//==============

removeFromValidations = findValidations.forEach(op=removeEvidence, paramName="validationIdObj");

removeValidationReferences = #competencyGetUserIds().forEach(op=removeFromValidations, paramName="userId");

ifNotSetRemoveReferences = #if(operator="@leaveReferences", operand="true", nei=removeValidationReferences);

evidenceFileId = #idxGet(evidenceDB, key="@evidenceId").toObject().get(fileId="");

deleteEvidence = #idxDelete(evidenceDB, key="@evidenceId");
deleteFileThenEvidence = #object(
	a=#fileDeleteFile(evidenceFileDB, id="@fileId"),
	b=deleteEvidence
);

checkEvidenceFile = #if(operator="@fileId", operand="", eq=deleteEvidence, ne=deleteFileThenEvidence);

checkForFile = #call(obj=checkEvidenceFile, fileId=evidenceFileId); 

delete = #object(
	a=#competencyErrorEvidenceIdSet(),
	b=#competencyErrorEvidenceExists(),
	c=checkForFile,
	d=ifNotSetRemoveReferences
).string(str="true");

#competencyDeleteEvidence = delete;
